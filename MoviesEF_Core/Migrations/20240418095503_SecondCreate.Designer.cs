// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesEF_Core.Context;

#nullable disable

namespace MoviesEF_Core.Migrations
{
    [DbContext(typeof(StoredContext))]
    [Migration("20240418095503_SecondCreate")]
    partial class SecondCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoviesEF_Core.Classes.Directors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directorss");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.MovieSubtitle", b =>
                {
                    b.Property<int>("SubtitleId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("SubtitleId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieSubtitles");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.Movies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("MovieReleaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Moviess");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.MoviesImdbDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImdbPoint")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("MoviesImdbDetails");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.Subtitles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SubtitleLanguage")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Subtitless");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.MovieSubtitle", b =>
                {
                    b.HasOne("MoviesEF_Core.Classes.Movies", "Movies")
                        .WithMany("MovieSubtitles")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoviesEF_Core.Classes.Subtitles", "Subtitles")
                        .WithMany("MovieSubtitles")
                        .HasForeignKey("SubtitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Subtitles");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.Movies", b =>
                {
                    b.HasOne("MoviesEF_Core.Classes.Directors", "Directors")
                        .WithMany("Moviess")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directors");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.MoviesImdbDetail", b =>
                {
                    b.HasOne("MoviesEF_Core.Classes.Movies", "Movies")
                        .WithOne("MoviesImdbDetail")
                        .HasForeignKey("MoviesEF_Core.Classes.MoviesImdbDetail", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.Directors", b =>
                {
                    b.Navigation("Moviess");
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.Movies", b =>
                {
                    b.Navigation("MovieSubtitles");

                    b.Navigation("MoviesImdbDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviesEF_Core.Classes.Subtitles", b =>
                {
                    b.Navigation("MovieSubtitles");
                });
#pragma warning restore 612, 618
        }
    }
}
